{"version":3,"sources":["components/header.js","components/navBar.js","App.js","index.js"],"names":["Header","props","useStyletron","css","theme","headerStyles","display","marginTop","marginBottom","blobColors","colors","accent700","accent600","accent500","accent400","accent300","accent200","accent100","accent","array","i","length","j","Math","floor","random","temp","shuffleArray","Blob1","styled","$theme","position","top","toString","left","fill","animation","transformOrigin","zIndex","Blob2","Blob3","Blob4","Blob5","className","height","width","paddingTop","cursor","show","span","Delay","ms","href","overflowX","viewBox","xmlns","transform","d","NavBar","containerStyles","boxSizing","boxShadow","style","borderBottomWidth","backgroundColor","background","$align","ALIGN","margin","center","right","checked","toggleChecked","onChange","toggleOnChange","checkmarkType","STYLE_TYPE","toggle_round","labelPlacement","themeName","Centered","justifyContent","alignItems","backgroundAccent","THEME","App","React","useState","setTheme","toggle","setToggle","LightTheme","DarkTheme","e","nextToggle","currentTarget","engine","Styletron","ReactDOM","render","value","StrictMode","document","getElementById"],"mappings":"qZA0LeA,MAlKf,SAAgBC,GAAQ,IAAD,EACEC,cADF,mBACZC,EADY,KACPC,EADO,KAEbC,EAAeF,EAAI,CACrBG,QAAS,eAAgBC,UAAU,EAAGC,aAAc,IAEpDC,EAAa,CAACL,EAAMM,OAAOC,UAAWP,EAAMM,OAAOE,UAAWR,EAAMM,OAAOG,UAAWT,EAAMM,OAAOI,UAAWV,EAAMM,OAAOK,UAAWX,EAAMM,OAAOM,UAAWZ,EAAMM,OAAOO,UAAWb,EAAMM,OAAOQ,SAf3M,SAAsBC,GAClB,IAAK,IAAIC,EAAID,EAAME,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACvC,IAAIE,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACjBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,GAWfC,CAAalB,GAGb,IAAMmB,EAAQC,YAAO,OAAO,YAAc,EAAZC,OAC1B,MAAO,CACPC,SAAU,WACVC,MAAwB,GAAjBT,KAAKE,SAAkB,IAAIQ,WAAa,IAC/CC,OAAwB,GAAjBX,KAAKE,UAAgBQ,WAAa,IACzCE,KAAM1B,EAAW,GACjB2B,UAAW,iCACXC,gBAAiB,UACjBC,OAAQf,KAAKC,MAAsB,EAAhBD,KAAKE,cAKtBc,EAAQV,YAAO,OAAO,YAAc,EAAZC,OAC1B,MAAO,CACPC,SAAU,WACVC,KAAuB,GAAhBT,KAAKE,SAAiB,IAAIQ,WAAa,IAC9CC,MAAuB,GAAhBX,KAAKE,SAAiB,IAAIQ,WAAa,IAC9CE,KAAM1B,EAAW,GACjB2B,UAAW,iCACXC,gBAAiB,UACjBC,OAAQf,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,MAKtCe,EAAQX,YAAO,OAAO,YAAc,EAAZC,OAC1B,MAAO,CACPC,SAAU,WACVC,KAAuB,GAAhBT,KAAKE,SAAiB,IAAIQ,WAAa,IAC9CC,MAAuB,GAAhBX,KAAKE,SAAiB,IAAIQ,WAAa,IAC9CE,KAAM1B,EAAW,GACjB2B,UAAW,iCACXC,gBAAiB,UACjBC,OAAQf,KAAKC,MAAsB,EAAhBD,KAAKE,cAKtBgB,EAAQZ,YAAO,OAAO,YAAc,EAAZC,OAC1B,MAAO,CACPC,SAAU,WACVC,KAAuB,GAAhBT,KAAKE,SAAiB,IAAIQ,WAAa,IAC9CC,MAAwB,GAAhBX,KAAKE,SAAiB,IAAIQ,WAAa,IAC/CE,KAAM1B,EAAW,GACjB2B,UAAW,iCACXC,gBAAiB,UACjBC,OAAQf,KAAKC,MAAsB,EAAhBD,KAAKE,cAKtBiB,EAAQb,YAAO,OAAO,YAAc,EAAZC,OAC1B,MAAO,CACPC,SAAU,WACVC,KAAuB,GAAhBT,KAAKE,SAAiB,IAAIQ,WAAa,IAC9CC,MAAuB,GAAhBX,KAAKE,SAAiB,IAAIQ,WAAa,IAC9CE,KAAM1B,EAAW,GACjB2B,UAAW,iCACXC,gBAAiB,UACjBC,OAAQf,KAAKC,MAAsB,EAAhBD,KAAKE,cAG5B,OACA,gBAAC,WAAD,KAEI,uBAAKkB,UAAWxC,EAAI,CAACyC,OAAQ,QAASC,MAAO,OAAQP,OAAQ,KACzD,uBAAKK,UAAWxC,EAAI,CAAC2C,WAAY,WACjC,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAQC,OAAQ,CAACC,MAAM,IACvB,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAMC,KAAM,CAAC,EAAE,EAAE,IACf,gBAAC,IAAD,CAASN,UAAWtC,GAApB,YAEF,gBAAC,IAAO6C,MAAR,CAAcC,GAAI,MAClB,gBAAC,IAAD,CAAMF,KAAM,CAAC,EAAE,EAAE,IACf,gBAAC,IAAD,CAASN,UAAWtC,GAApB,cAEF,gBAAC,IAAO6C,MAAR,CAAcC,GAAI,MAClB,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAYR,UAAWtC,GAAvB,eAOF,gBAAC,IAAD,KACA,gBAAC,IAAD,CAAM4C,KAAM,CAAC,EAAE,EAAE,IACf,gBAAC,IAAD,qOAIE,gBAAC,IAAD,CAAYG,KAAK,yDAAjB,cAMR,uBAAKT,UAAWxC,EAAI,CAAC4B,SAAU,WAAYC,IAAK,EAAGE,KAAM,EAAGW,MAAO,QAASD,OAAQ,UAChF,uBAAKD,UAAWxC,EAAI,CAAC4B,SAAU,WAAYa,OAAQ,OAAQS,UAAW,YAKtE,gBAACzB,EAAD,KACA,uBAAKiB,MAAM,MAAMD,OAAO,MAAMU,QAAQ,cAAcC,MAAM,8BACtD,qBAAGC,UAAU,sBACT,wBAAMC,EAAE,8QAMhB,gBAAClB,EAAD,KACA,uBAAKM,MAAM,MAAMD,OAAO,MAAMU,QAAQ,cAAcC,MAAM,8BACtD,qBAAGC,UAAU,sBACT,wBAAMC,EAAE,gIAMhB,gBAACjB,EAAD,KACA,uBAAMK,MAAM,MAAMD,OAAO,MAAMU,QAAQ,cAAcC,MAAM,8BACvD,qBAAGC,UAAU,sBACT,wBAAMC,EAAE,oSAMhB,gBAAChB,EAAD,KACA,uBAAKI,MAAM,MAAMD,OAAO,MAAMU,QAAQ,cAAcC,MAAM,8BACtD,qBAAGC,UAAU,sBACT,wBAAMC,EAAE,2QAKhB,gBAACf,EAAD,KACA,uBAAKG,MAAM,MAAMD,OAAO,MAAMU,QAAQ,cAAcC,MAAM,8BACtD,qBAAGC,UAAU,sBACT,wBAAMC,EAAE,uQ,uCCxGbC,MAxDf,SAAgBzD,GAAQ,IAAD,EACAC,cADA,mBACdC,EADc,KACTC,EADS,KAEfuD,EAAkBxD,EAAI,CAC1ByD,UAAW,aACXf,MAAO,QACPd,SAAU,QACVC,IAAK,IACLE,KAAM,IACN2B,UAAW,8BACXvB,OAAQ,IAGV,OACE,gBAAC,WAAD,KACI,gBAAC,IAAD,KACE,uBAAKK,UAAWgB,GAChB,gBAAC,IAAD,CAAkBG,MAAO,CAACC,kBAAmB,EAAGC,gBAAgB,GAAD,OAAK5D,EAAMM,OAAOuD,cACjF,gBAAC,IAAD,CAAsBC,OAAQC,IAAMjC,MAClC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAIkC,OAAQ,GAAZ,uBAKJ,gBAAC,IAAD,CAAsBF,OAAQC,IAAME,SACpC,gBAAC,IAAD,CAAsBH,OAAQC,IAAMG,OAClC,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAYlB,KAAK,gBAAjB,iBAIF,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAYA,KAAK,gBAAjB,kBAKJ,gBAAC,IAAD,CAAsBc,OAAQC,IAAMG,MAAOR,MAAO,CAAC,YAAe,SAChE,gBAAC,IAAD,KACE,gBAAC,IAAD,CACES,QAAStE,EAAMuE,cACfC,SAAUxE,EAAMyE,eAChBC,cAAeC,IAAWC,aAC1BC,eAAe,OAEd7E,EAAM8E,kBC9CjBC,EAAWnD,YAAO,OAAO,YAC7B,MAAO,CACLvB,QAAS,OACT2E,eAAgB,SAChBC,WAAY,SACZtC,OAAQ,OACRC,MAAO,QACPmB,gBAPyC,EAAZlC,OAOLpB,OAAOyE,qBAI7BC,EACG,QADHA,EAEE,OAgCOC,MA3Bf,WAAgB,IAAD,EACaC,IAAMC,SAASH,GAD5B,mBACNhF,EADM,KACCoF,EADD,OAEeF,IAAMC,UAAS,GAF9B,mBAENE,EAFM,KAEEC,EAFF,OAGCxF,cACd,OAJa,oBAKT,kBAAC,IAAD,CAAcE,MAAOA,IAAUgF,EAAcO,IAAaC,KACxD,kBAAC,IAAD,KACA,kBAAC,EAAD,CACApB,cAAeiB,EACff,eAAgB,SAAAmB,GACd,IAAIC,EACJA,EAAaD,EAAEE,cAAcxB,QAC7BmB,EAAUI,GACVN,EAASpF,IAAUgF,EAAcA,EAAaA,IAChDL,UAAW3E,IAAUgF,EAAc,YAAc,gBAGjD,kBAACJ,EAAD,KACA,kBAAC,EAAD,CAAQ5E,MAAOA,KAEf,iD,gBC9CF4F,EAAS,IAAIC,IAGnBC,IAASC,OACP,kBAAC,IAAD,CAAmBC,MAAOJ,GAC1B,kBAAC,IAAMK,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,W","file":"static/js/main.8feb7883.chunk.js","sourcesContent":["import * as React from 'react';\nimport {useStyletron, styled} from 'baseui';\nimport {Grid, Cell, BEHAVIOR, ALIGNMENT} from 'baseui/layout-grid';\nimport {Heading, HeadingLevel} from 'baseui/heading';\nimport Typist from 'react-typist';\nimport { StyledLink } from \"baseui/link\";\nimport {Layer} from 'baseui/layer';\n\n\nimport 'react-typist/dist/Typist.css';\nimport './../blob.scss'\n\nimport { Paragraph1 } from 'baseui/typography';\n\nfunction shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n}\n\n\nfunction Header(props) {\n    const [css, theme] = useStyletron();\n    const headerStyles = css({\n        display: 'inline-block', marginTop:0, marginBottom: 0\n      });\n    let blobColors = [theme.colors.accent700, theme.colors.accent600, theme.colors.accent500, theme.colors.accent400, theme.colors.accent300, theme.colors.accent200, theme.colors.accent100, theme.colors.accent];\n    shuffleArray(blobColors)\n    // medium blob near name/intro\n    // Possible spawn   top: [-30, -10]     left: [-20, 0]\n    const Blob1 = styled('div', ({$theme}) => {\n        return {\n        position: 'absolute',\n        top: ((Math.random() * -20) - 10).toString() + \"%\",\n        left: (Math.random() * -20).toString() + \"%\",\n        fill: blobColors[0],\n        animation: \"move1 60s ease-in-out infinite\",\n        transformOrigin: \"50% 50%\",\n        zIndex: Math.floor(Math.random() * 4),\n        };\n    });\n    // small blob near center\n    // Possible spawn   top: [-30, 20]      left: [-20, 60]\n    const Blob2 = styled('div', ({$theme}) => {\n        return {\n        position: 'absolute',\n        top: ((Math.random() * 50) - 30).toString() + \"%\",\n        left:((Math.random() * 80) - 20).toString() + \"%\",\n        fill: blobColors[1],\n        animation: \"move2 30s ease-in-out infinite\",\n        transformOrigin: \"50% 50%\",\n        zIndex: Math.floor(Math.random() * 2) + 2,\n        };\n    });\n    // large blob on the right\n    // Possible spawn   top: [-30, 40]      left: [55, 70]\n    const Blob3 = styled('div', ({$theme}) => {\n        return {\n        position: 'absolute',\n        top: ((Math.random() * 70) - 30).toString() + \"%\",\n        left:((Math.random() * 15) + 55).toString() + \"%\",\n        fill: blobColors[2],\n        animation: \"move3 70s ease-in-out infinite\",\n        transformOrigin: \"50% 50%\",\n        zIndex: Math.floor(Math.random() * 4),\n        };\n    });\n    // medium blob in the center\n    // Possible spawn   top: [20, 40]       left: [-10, 52]\n    const Blob4 = styled('div', ({$theme}) => {\n        return {\n        position: 'absolute',\n        top: ((Math.random() * 20) + 20).toString() + \"%\",\n        left: ((Math.random() * 62) - 10).toString() + \"%\",\n        fill: blobColors[3],\n        animation: \"move4 70s ease-in-out infinite\",\n        transformOrigin: \"50% 50%\",\n        zIndex: Math.floor(Math.random() * 2),\n        };\n    });\n    // small/medium blob on bottom-right\n    // Possible spawn   top: [-35, 45]      left: [60, 70]\n    const Blob5 = styled('div', ({$theme}) => {\n        return {\n        position: 'absolute',\n        top: ((Math.random() * 80) - 35).toString() + \"%\",\n        left:((Math.random() * 10) + 60).toString() + \"%\",\n        fill: blobColors[4],\n        animation: \"move5 30s ease-in-out infinite\",\n        transformOrigin: \"50% 50%\",\n        zIndex: Math.floor(Math.random() * 4),\n        };\n    });\n    return(\n    <React.Fragment>\n        {/* TODO: add a profile picture and shit or at least a rectangle where a pic should go lol */}\n        <div className={css({height: \"100vh\", width: '100%', zIndex: 5})}>\n            <div className={css({paddingTop: \"110px\"})}>\n            <Grid>\n            <Typist cursor={{show: false}}>\n            <HeadingLevel>\n            <Cell span={[3,6,8]}>\n              <Heading className={headerStyles}>Mustafa</Heading>\n            </Cell>\n            <Typist.Delay ms={200} />\n            <Cell span={[2,4,6]}>\n              <Heading className={headerStyles}>Sadriwala</Heading>\n            </Cell>\n            <Typist.Delay ms={100} />\n            <Cell>\n              <Paragraph1 className={headerStyles}>\n                \"Moose\"\n              </Paragraph1>\n            </Cell>\n            </HeadingLevel>\n            </Typist>\n            </Grid>\n            <Grid>\n            <Cell span={[3,6,8]}>\n              <Paragraph1>\n                A fast-learning, honors computer science senior at the University of Texas at Dallas \n                with an affinity for software development, writing, and painting. For a brief explanation \n                of recursion check out my personal website&nbsp;\n                <StyledLink href=\"https://mustafa-sadriwala.github.io/personal_website/\">here!</StyledLink>\n              </Paragraph1>\n            </Cell>\n            </Grid>\n            </div>\n        </div>\n        <div className={css({position: 'absolute', top: 0, left: 0, width: '100vw', height: '100%'})}>\n            <div className={css({position: 'relative', height: '100%', overflowX: 'hidden'})}>\n\n            {/* TODO: Make randomizing function to choose random blob, coordinates, and fill color */}\n            {/* POSSIBLE    top: [-40%, 50%] left: [-20%, 75%]*/}\n            {/* IDEAL       top: [-30%, -10%] left: [-20%, 0%] */}\n            <Blob1>\n            <svg width=\"600\" height=\"600\" viewBox=\"0 0 600 600\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g transform=\"translate(300,300)\">\n                    <path d=\"M138.9,-119.1C170,-71.9,178.1,-14.7,168.5,43C159,100.7,131.8,158.9,89.2,175.9C46.6,192.8,-11.4,168.5,-68.2,141.3C-124.9,114.1,-180.4,84,-193.1,40.6C-205.8,-2.8,-175.6,-59.4,-136.3,-108.5C-96.9,-157.6,-48.5,-199.3,2.7,-201.5C53.9,-203.7,107.9,-166.4,138.9,-119.1Z\" />\n                </g>\n            </svg>\n            </Blob1>\n            {/* POSSIBLE    top: [-35%, 40%] left: [-20%, 70%]*/}\n            {/* IDEAL       top: [15%] left: [--]*/}\n            <Blob2>\n            <svg width=\"600\" height=\"600\" viewBox=\"0 0 600 600\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g transform=\"translate(300,300)\">\n                    <path d=\"M152,22C152,58.7,76,117.3,15.5,117.3C-45,117.3,-90,58.7,-90,22C-90,-14.7,-45,-29.3,15.5,-29.3C76,-29.3,152,-14.7,152,22Z\" />\n                </g>\n            </svg>\n            </Blob2>\n            {/* POSSIBLE:   top: [-35%, 40%] left: [-20%, 75%]*/}\n            {/* IDEAL:      top: [--] left: [70%] */}\n            <Blob3>\n            <svg  width=\"600\" height=\"600\" viewBox=\"0 0 600 600\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g transform=\"translate(300,300)\">\n                    <path d=\"M70.2,-92.1C92.4,-48.1,112.7,-24,133.7,21C154.7,66,176.3,132,154.2,160.8C132,189.7,66,181.3,13,168.4C-40.1,155.4,-80.1,137.8,-126.1,109C-172.1,80.1,-224.1,40.1,-230.3,-6.2C-236.6,-52.6,-197.1,-105.1,-151.1,-149.1C-105.1,-193.1,-52.6,-228.6,-14.3,-214.3C24,-200,48.1,-136.1,70.2,-92.1Z\" />\n                </g>\n            </svg>\n            </Blob3>\n            {/* POSSIBLE:   top: [-35%, 35%], left: [-20%, 72%] */}\n            {/* IDEAL:      top: [-] left: [-]*/}\n            <Blob4>\n            <svg width=\"600\" height=\"600\" viewBox=\"0 0 600 600\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g transform=\"translate(300,300)\">\n                    <path d=\"M185.5,-130.3C228.7,-93.7,244,-17.3,218.4,31.7C192.7,80.6,126.1,102,62.5,134.3C-1,166.7,-61.5,209.9,-110.5,198.3C-159.6,186.7,-197.3,120.1,-209.5,52C-221.8,-16.2,-208.6,-86,-169.5,-121.6C-130.3,-157.2,-65.2,-158.6,3,-161C71.1,-163.4,142.3,-166.8,185.5,-130.3Z\"/>\n                </g>\n            </svg>\n            </Blob4>\n            {/* POSSIBLE:   top: [-35%, 40%] left: [-20%, 70%]*/}\n            <Blob5>\n            <svg width=\"600\" height=\"600\" viewBox=\"0 0 600 600\" xmlns=\"http://www.w3.org/2000/svg\">\n                <g transform=\"translate(300,300)\">\n                    <path d=\"M116.5,-85.1C149.7,-51.4,174.3,-3,153.7,14.2C133.2,31.5,67.5,17.5,13,54.3C-41.5,91,-84.8,178.4,-123.4,186.5C-162,194.7,-196.1,123.6,-187.8,68.9C-179.4,14.2,-128.8,-24.1,-90.5,-59C-52.1,-93.9,-26.1,-125.4,7.8,-131.7C41.7,-137.9,83.4,-118.8,116.5,-85.1Z\" />\n                </g>\n            </svg>\n            </Blob5>\n            </div>\n            </div>\n    </React.Fragment>\n);\n};\n\nexport default Header","import * as React from 'react';\nimport {useStyletron} from 'baseui';\nimport {Button} from 'baseui/button';\nimport {Layer} from 'baseui/layer';\nimport {\n  HeaderNavigation,\n  ALIGN,\n  StyledNavigationList,\n  StyledNavigationItem\n} from \"baseui/header-navigation\";\nimport { StyledLink } from \"baseui/link\";\nimport {Checkbox, STYLE_TYPE} from 'baseui/checkbox';\nimport {H5} from 'baseui/typography'\n\n\n\nfunction NavBar(props) {\n  const [css, theme] = useStyletron();\n  const containerStyles = css({\n    boxSizing: 'border-box',\n    width: '100vw',\n    position: 'fixed',\n    top: '0',\n    left: '0',\n    boxShadow: '0 5px 7px 0 rgba(0,0,0,0.3)',\n    zIndex: 6\n    //backgroundColor: theme.colors.background\n  });\n  return (\n    <React.Fragment>\n        <Layer>\n          <div className={containerStyles}>\n          <HeaderNavigation style={{borderBottomWidth: 0, backgroundColor: `${theme.colors.background}`}}>\n          <StyledNavigationList $align={ALIGN.left}>\n            <StyledNavigationItem>\n              <H5 margin={0}>\n                Mustafa Sadriwala\n              </H5>\n            </StyledNavigationItem>\n          </StyledNavigationList>\n          <StyledNavigationList $align={ALIGN.center} />\n          <StyledNavigationList $align={ALIGN.right}>\n            <StyledNavigationItem>\n              <StyledLink href=\"#basic-link1\">\n                Tab Link One\n              </StyledLink>\n            </StyledNavigationItem>\n            <StyledNavigationItem>\n              <StyledLink href=\"#basic-link2\">\n                Tab Link Two\n              </StyledLink>\n            </StyledNavigationItem>\n          </StyledNavigationList>\n          <StyledNavigationList $align={ALIGN.right} style={{'marginRight': '30px'}}>\n            <StyledNavigationItem>\n              <Checkbox\n                checked={props.toggleChecked}\n                onChange={props.toggleOnChange}\n                checkmarkType={STYLE_TYPE.toggle_round}\n                labelPlacement=\"top\"\n              >\n                {props.themeName}\n              </Checkbox>\n            </StyledNavigationItem>\n          </StyledNavigationList>\n          </HeaderNavigation>\n          </div>\n        </Layer>\n    </React.Fragment>\n  );\n};\n\nexport default NavBar","import React from 'react';\nimport './App.scss';\nimport {Button, KIND, SIZE, SHAPE} from 'baseui/button';\nimport {DarkTheme, LightTheme, BaseProvider, styled} from 'baseui';\nimport {Layer} from 'baseui/layer';\nimport {useStyletron} from 'baseui';\nimport {Grid, Cell, BEHAVIOR, ALIGNMENT} from 'baseui/layout-grid';\n\n\nimport 'react-typist/dist/Typist.css';\n\nimport Header from './components/header'\nimport NavBar from './components/navBar';\n\n\nconst Centered = styled('div', ({$theme}) => {\n  return {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100%',\n    width: '100wh',\n    backgroundColor: $theme.colors.backgroundAccent\n  };\n});\n\nconst THEME = {\n  light: 'light',\n  dark: 'dark',\n};\n\n\n\nfunction App() {\n  const [theme, setTheme] = React.useState(THEME.light);\n  const [toggle, setToggle] = React.useState(false);\n  const [css] = useStyletron();\n  return (\n      <BaseProvider theme={theme === THEME.light ? LightTheme : DarkTheme}>\n        <Layer>\n        <NavBar \n        toggleChecked={toggle} \n        toggleOnChange={e => {\n          let nextToggle = toggle;\n          nextToggle = e.currentTarget.checked;\n          setToggle(nextToggle);\n          setTheme(theme === THEME.light ? THEME.dark : THEME.light);}}\n        themeName={theme === THEME.light ? 'dark mode' : 'light mode'}\n      />\n        </Layer>\n        <Centered>\n        <Header theme={theme}/>\n        </Centered>\n        <div>\n          text text text\n        </div>\n      </BaseProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport {Client as Styletron} from 'styletron-engine-atomic';\nimport {Provider as StyletronProvider} from 'styletron-react';\n\nconst engine = new Styletron();\n\n\nReactDOM.render(\n  <StyletronProvider value={engine}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </StyletronProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}